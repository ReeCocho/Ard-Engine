[
    (
        name: "Frustum",
        no_mangle: false,
        fields: [
            /// Planes come in the following order:
            /// - Left
            /// - Right
            /// - Top
            /// - Bottom
            /// - Near
            /// - Far
            /// With inward facing normals.
            (name: "planes", ty: Array(ty: Vec4, len: "6")),
        ]
    ),
    (
        name: "Froxel",
        no_mangle: false,
        fields: [
            (name: "planes", ty: Array(ty: Vec4, len: "4")),
            (name: "min_max_z", ty: Vec4),
        ]
    ),
    (
        name: "Camera",
        no_mangle: false,
        fields: [
            (name: "view", ty: Mat4),
            (name: "projection", ty: Mat4),
            (name: "vp", ty: Mat4),
            (name: "view_inv", ty: Mat4),
            (name: "projection_inv", ty: Mat4),
            (name: "vp_inv", ty: Mat4),
            (name: "frustum", ty: Struct("Frustum")),
            (name: "position", ty: Vec4),
            (name: "near_clip", ty: F32),
            (name: "far_clip", ty: F32),
            (name: "cluster_scale_bias", ty: Vec2),
        ]
    ),
    (
        name: "Froxels",
        no_mangle: false,
        fields: [
            (name: "froxels", ty: Array(ty: Array(ty: Array(ty: Struct("Froxel"), len: "CAMERA_FROXELS_DEPTH"), len: "CAMERA_FROXELS_HEIGHT"), len: "CAMERA_FROXELS_WIDTH")),
        ]
    ),
    (
        name: "ObjectBounds",
        no_mangle: false,
        fields: [
            // The `w` component of `center` should be a bounding sphere radius.
            (name: "center", ty: Vec4),
            (name: "half_extents", ty: Vec4),
        ]
    ),
    (
        name: "ObjectId",
        no_mangle: true,
        fields: [
            /// Index within the draw call buffer for the draw this object belongs to.
            ///
            /// # NOTE
            /// This is an array of two elements because we use this space for object sorting
            /// using draw keys which are u64s (two u32s).
            (name: "draw_idx", ty: Array(ty: U32, len: "2")),
            /// Index within the object data buffer for the object
            (name: "data_idx", ty: U32),
            (name: "_padding", ty: F32),
        ]
    ),
    // Per instance object data.
    (
        name: "ObjectData",
        no_mangle: false,
        fields: [
            (name: "model", ty: Mat4),       // Object instance model matrix
            (name: "normal", ty: Mat4),      // inv(transpose(model))
            (name: "material", ty: U32),     // Material ID for properties lookup
            (name: "textures", ty: U32),     // Texture table ID
            (name: "entity_id", ty: U32),    // ECS entity ID
            (name: "entity_ver", ty: U32),   // ECS entity version
        ]
    ),
    // Indirect indexed draw call.
    (
        name: "DrawCall",
        no_mangle: true,
        fields: [
            (name: "index_count", ty: U32),
            (name: "instance_count", ty: U32),
            (name: "first_index", ty: U32),
            (name: "vertex_offset", ty: I32),
            (name: "first_instance", ty: U32),
            (name: "draw_bin", ty: U32),
            (name: "bin_offset", ty: U32),
            (name: "bounds", ty: Struct("ObjectBounds")),
        ]
    ),
    // Data used by point and spot lights.
    (
        name: "Light",
        no_mangle: false,
        fields: [
            /// XYZ = Color       W = Intensity
            (name: "color_intensity", ty: Vec4),
            /// XYZ = Position    W = Range
            (name: "position_range", ty: Vec4),
            /// XYZ = Direction   W = Cosine of the half angle of the light
            /// If radius is negative, the light is a point light.
            (name: "direction_angle", ty: Vec4),
        ]
    ),
    // Array used for light binning/clustering.
    (
        name: "LightTable",
        no_mangle: false,
        fields: [
            (name: "counts", ty: Array(ty: Array(ty: Array(ty: U32, len: "CAMERA_FROXELS_HEIGHT"), len: "CAMERA_FROXELS_WIDTH"), len: "CAMERA_FROXELS_DEPTH")),
            (name: "clusters", ty: Array(ty: Array(ty: Array(ty: Array(ty: U32, len: "MAX_LIGHTS_PER_CLUSTER"), len: "CAMERA_FROXELS_HEIGHT"), len: "CAMERA_FROXELS_WIDTH"), len: "CAMERA_FROXELS_DEPTH")),
        ]
    ),
    // Global lighting data.
    (
        name: "GlobalLighting",
        no_mangle: false,
        fields: [
            (name: "ambient_color_intensity", ty: Vec4),
            (name: "sun_direction", ty: Vec4),
            (name: "sun_color_intensity", ty: Vec4),
        ]
    ),
    // Describes a shadow cascade.
    (
        name: "ShadowCascade",
        no_mangle: false,
        fields: [
            (name: "vp", ty: Mat4),
            (name: "view", ty: Mat4),
            (name: "proj", ty: Mat4),
            (name: "uv_size", ty: Vec2),
            (name: "far_plane", ty: F32),
            (name: "min_bias", ty: F32),
            (name: "max_bias", ty: F32),
            (name: "depth_range", ty: F32),
        ]
    ),
    // Describes sun shadows.
    (
        name: "SunShadows",
        no_mangle: false,
        fields: [
            (name: "cascades", ty: Array(ty: Struct("ShadowCascade"), len: "MAX_SHADOW_CASCADES")),
            (name: "count", ty: U32),
        ]
    ),
    // PBR material info.
    (
        name: "PbrMaterial",
        no_mangle: false,
        fields: [
            (name: "color", ty: Vec4),
            (name: "metallic", ty: F32),
            (name: "roughness", ty: F32),
            (name: "alpha_cutoff", ty: F32),
        ]
    ),
    // Push constants for HZB generation.
    (
        name: "HzbGenPushConstants",
        no_mangle: false,
        fields: [
            (name: "input_size", ty: IVec2),
            (name: "inv_output_size", ty: Vec2),
        ]
    ),
    // Push constants for draw call generation.
    (
        name: "DrawGenPushConstants",
        no_mangle: false,
        fields: [
            (name: "render_area", ty: Vec2),
            (name: "object_count", ty: U32),
            (name: "transparent_start", ty: U32),
        ]
    ),
    // Push constants for draw call compaction.
    (
        name: "DrawCompactPushConstants",
        no_mangle: false,
        fields: [
            (name: "base_draw_call", ty: U32),
            (name: "draw_call_count", ty: U32),
            (name: "transparent_start", ty: U32),
        ]
    ),
    // Push constants used for light binning/clustering.
    (
        name: "LightClusteringPushConstants",
        no_mangle: false,
        fields: [
            (name: "total_lights", ty: U32),
        ]
    ),
    // Push constants for generating the AO image.
    (
        name: "AoConstructPushConstants",
        no_mangle: false,
        fields: [
            (name: "render_area", ty: Vec2),
            (name: "inv_render_area", ty: Vec2),
            (name: "noise_scale", ty: Vec2),
            (name: "radius", ty: F32),
            (name: "bias", ty: F32),
        ]
    ),
    // Push constants for adaptive luminance histogram generation.
    (
        name: "AdaptiveLumHistogramGenPushConstants",
        no_mangle: false,
        fields: [
            (name: "min_log2_lum", ty: F32),
            (name: "inv_log2_lum", ty: F32),
        ]
    ),
    // Push constants for adaptive luminance computation.
    (
        name: "AdaptiveLumPushConstants",
        no_mangle: false,
        fields: [
            (name: "min_log_lum", ty: F32),
            (name: "log_lum_range", ty: F32),
            (name: "time_coeff", ty: F32),
            (name: "num_pixels", ty: F32),
        ]
    ),
    // Push constants used for tonemapping.
    (
        name: "ToneMappingPushConstants",
        no_mangle: false,
        fields: [
            (name: "exposure", ty: F32),
            (name: "gamma", ty: F32),
        ]
    )
]