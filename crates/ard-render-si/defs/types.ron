[
    (
        name: "Meshlet",
        no_mangle: false,
        // Data for meshlets is packed together into a single 128-bit value.
        // The layout is as follows (from lowest to highest bit).
        //
        // Vertex offset    : 32
        // Index offset     : 32
        // Vertex count     : 8
        // Primitive count  : 8
        // Min point        : 24
        // Max point        : 24
        //
        // Min and max point are 8-bit per channel unorm vec3s.
        // They represent the bounding box relative to the bounds of the whole mesh.
        fields: [
            (name: "data", ty: UVec4),
        ]
    ),
    (
        name: "Frustum",
        no_mangle: false,
        fields: [
            /// Planes come in the following order:
            /// - Left
            /// - Right
            /// - Top
            /// - Bottom
            /// - Near
            /// - Far
            /// With inward facing normals.
            (name: "planes", ty: Array(ty: Vec4, len: "6")),
        ]
    ),
    (
        name: "Froxel",
        no_mangle: false,
        fields: [
            (name: "planes", ty: Array(ty: Vec4, len: "4")),
            (name: "min_max_z", ty: Vec4),
        ]
    ),
    (
        name: "Camera",
        no_mangle: false,
        fields: [
            (name: "view", ty: Mat4),
            (name: "projection", ty: Mat4),
            (name: "vp", ty: Mat4),
            (name: "view_inv", ty: Mat4),
            (name: "projection_inv", ty: Mat4),
            (name: "vp_inv", ty: Mat4),
            (name: "frustum", ty: Struct("Frustum")),
            (name: "position", ty: Vec4),
            (name: "forward", ty: Vec4),
            (name: "aspect_ratio", ty: F32),
            (name: "near_clip", ty: F32),
            (name: "far_clip", ty: F32),
            (name: "cluster_scale_bias", ty: Vec2),
        ]
    ),
    (
        name: "Froxels",
        no_mangle: false,
        fields: [
            (name: "frustums", ty: Array(len: "CAMERA_FROXELS_WIDTH", ty: Array(len: "CAMERA_FROXELS_HEIGHT", ty: Array(len: "4", ty: Vec4)))),
            (name: "min_max_z", ty: Array(len: "CAMERA_FROXELS_DEPTH", ty: Vec2)),
            (name: "min_max_xy", ty: Array(len: "CAMERA_FROXELS_WIDTH", ty: Array(len: "CAMERA_FROXELS_HEIGHT", ty: Array(len: "CAMERA_FROXELS_DEPTH", ty: Vec4)))),
        ]
    ),
    (
        name: "ObjectBounds",
        no_mangle: false,
        fields: [
            // The `w` component of `min_pt` should be a bounding sphere radius.
            (name: "min_pt", ty: Vec4),
            (name: "max_pt", ty: Vec4),
        ]
    ),
    (
        name: "ObjectId",
        no_mangle: true,
        fields: [
            /// Index within the object data buffer for the object.
            (name: "data_idx", ty: U32),
            /// The base index within the `output_meshlets` buffer to write meshlet IDs after
            /// culling. Element 0 is the number of meshlets.
            (name: "meshlet_base", ty: U32),
        ]
    ),
    // Per instance object data.
    (
        name: "ObjectData",
        no_mangle: true,
        fields: [
            // NOTE: The beginning of this structure must line up with
            // VkAccelerationStructureInstanceKHR for raytracing.
            (name: "model", ty: Mat3x4),        // Object instance model matrix
            (name: "instance_mask", ty: U32),   // 24-bits for custom idx. 8 for mask.
            (name: "shader_flags", ty: U32),    // 24-bits for shader binding table ofset. 8 for flags.
            (name: "blas", ty: U64),
            // Everything past here is up for us to decide.
            (name: "normal", ty: Mat4),         // inv(transpose(model))
            (name: "mesh", ty: U32),            // Mesh ID
            (name: "material", ty: U32),        // Material ID for properties lookup
            (name: "textures", ty: U32),        // Texture table ID
            (name: "entity_id", ty: U32),       // ECS entity ID
        ]
    ),
    // Indirect indexed draw call.
    (
        name: "DrawCall",
        no_mangle: true,
        fields: [
            (name: "index_count", ty: U32),
            (name: "instance_count", ty: U32),
            (name: "first_index", ty: U32),
            (name: "vertex_offset", ty: I32),
            (name: "first_instance", ty: U32),
        ]
    ),
    // Indirect dispatch.
    (
        name: "IndirectDispatch",
        no_mangle: true,
        fields: [
            (name: "x", ty: U32),
            (name: "y", ty: U32),
            (name: "z", ty: U32),
        ]
    ),
    // Per mesh info.
    (
        name: "MeshInfo",
        no_mangle: false,
        fields: [
            (name: "index_count", ty: U32),
            (name: "first_index", ty: U32),
            (name: "vertex_offset", ty: I32),
            (name: "meshlet_offset", ty: U32),
            (name: "meshlet_count", ty: U32),
            (name: "bounds", ty: Struct("ObjectBounds")),
        ]
    ),
    // Data used by point and spot lights.
    (
        name: "Light",
        no_mangle: false,
        fields: [
            /// XYZ = Color       W = Intensity
            (name: "color_intensity", ty: Vec4),
            /// XYZ = Position    W = Range
            (name: "position_range", ty: Vec4),
            /// XYZ = Direction   W = Cosine of the half angle of the light
            /// If W is negative, the light is a point light.
            (name: "direction_angle", ty: Vec4),
        ]
    ),
    // Array used for light binning/clustering.
    (
        name: "LightTable",
        no_mangle: false,
        fields: [
            (name: "clusters", ty: Array(ty: Array(ty: Array(ty: Array(ty: U32, len: "MAX_LIGHTS_PER_CLUSTER + 1"), len: "CAMERA_FROXELS_HEIGHT"), len: "CAMERA_FROXELS_WIDTH"), len: "CAMERA_FROXELS_DEPTH")),
        ]
    ),
    // Global lighting data.
    (
        name: "GlobalLighting",
        no_mangle: false,
        fields: [
            (name: "ambient_color_intensity", ty: Vec4),
            (name: "sun_direction", ty: Vec4),
            (name: "sun_color_intensity", ty: Vec4),
        ]
    ),
    // Describes a shadow cascade.
    (
        name: "ShadowCascade",
        no_mangle: false,
        fields: [
            (name: "vp", ty: Mat4),
            (name: "view", ty: Mat4),
            (name: "proj", ty: Mat4),
            (name: "uv_size", ty: Vec2),
            (name: "far_plane", ty: F32),
            (name: "min_depth_bias", ty: F32),
            (name: "max_depth_bias", ty: F32),
            (name: "normal_bias", ty: F32),
            (name: "depth_range", ty: F32),
        ]
    ),
    // Describes sun shadows.
    (
        name: "SunShadows",
        no_mangle: false,
        fields: [
            (name: "cascades", ty: Array(ty: Struct("ShadowCascade"), len: "MAX_SHADOW_CASCADES")),
            (name: "count", ty: U32),
            (name: "kernel", ty: Array(len: "SUN_SHADOW_KERNEL_SIZE", ty: U32)),
        ]
    ),
    // PBR material info.
    (
        name: "PbrMaterial",
        no_mangle: false,
        fields: [
            (name: "color", ty: Vec4),
            (name: "metallic", ty: F32),
            (name: "roughness", ty: F32),
            (name: "alpha_cutoff", ty: F32),
        ]
    ),
    // Sun shaft sample.
    (
        name: "SunShaftSample",
        no_mangle: false,
        fields: [
            // Low and high sample indices within the line packed into two 16-bit uints. High is
            // in the high bits and low is in the low bits.
            (name: "low_high", ty : U32),
            (name: "initial", ty : U32),
            // 16-bit color packed into two u32s.
            (name: "value", ty: UVec2),
        ]
    ),
    // Diffuse irradiance lighting coefficients.
    (
        name: "DiCoefficients",
        no_mangle: false,
        fields: [
            (name: "samples", ty: Array(len: "7", ty: Vec4)),
        ]
    ),
    // Diffuse irradiance prefiltering matrices.
    (
        name: "PrefilteringMatrices",
        no_mangle: false,
        fields: [
            (name: "red", ty: Mat4),
            (name: "green", ty: Mat4),
            (name: "blue", ty: Mat4),
        ]
    ),
    // Data used for environment prefiltering.
    (
        name: "EnvPrefilterInfo",
        no_mangle: false,
        fields: [
            (name: "halfway_vectors", ty: Array(len: "ENV_PREFILTER_SAMPLE_COUNT", ty: Vec4)),
            (name: "mip_levels", ty: Array(len: "ENV_PREFILTER_SAMPLE_COUNT", ty: F32)),
            (name: "sample_weights", ty: Array(len: "ENV_PREFILTER_SAMPLE_COUNT", ty: F32)),
            (name: "inv_total_sample_weight", ty: F32),
        ]
    ),
    // Push constants for mesh shadering rendering.
    (
        name: "DrawPushConstants",
        no_mangle: false,
        fields: [
            (name: "object_id_offset", ty: U32),
            (name: "object_id_count", ty: U32),
            (name: "render_area", ty: Vec2),
            (name: "lock_culling", ty: U32),
        ]
    ),
    // Push constants for HZB generation.
    (
        name: "HzbGenPushConstants",
        no_mangle: false,
        fields: [
            (name: "input_size", ty: IVec2),
            (name: "output_size", ty: IVec2),
            (name: "inv_output_size", ty: Vec2),
        ]
    ),
    // Push constants used for light binning/clustering.
    (
        name: "LightClusteringPushConstants",
        no_mangle: false,
        fields: [
            (name: "total_lights", ty: U32),
        ]
    ),
    // Push constants for adaptive luminance histogram generation.
    (
        name: "AdaptiveLumHistogramGenPushConstants",
        no_mangle: false,
        fields: [
            (name: "min_log2_lum", ty: F32),
            (name: "inv_log2_lum", ty: F32),
        ]
    ),
    // Push constants for adaptive luminance computation.
    (
        name: "AdaptiveLumPushConstants",
        no_mangle: false,
        fields: [
            (name: "min_log_lum", ty: F32),
            (name: "log_lum_range", ty: F32),
            (name: "time_coeff", ty: F32),
            (name: "num_pixels", ty: F32),
        ]
    ),
    // Push constants used for tonemapping.
    (
        name: "ToneMappingPushConstants",
        no_mangle: false,
        fields: [
            (name: "exposure", ty: F32),
            (name: "gamma", ty: F32),
        ]
    ),
    // Push constants for sun shaft generation setup.
    (
        name: "SunShaftGenPushConstants",
        no_mangle: false,
        fields: [
            (name: "line_count", ty: U32),
            (name: "sample_count_per_line", ty: U32),
            (name: "initial_sample_count", ty: U32),
            (name: "samples_per_work_group", ty: U32),
            (name: "low_sample_minimum", ty: U32),
            (name: "steps_per_sample", ty: U32),
            (name: "depth_threshold", ty: F32),
            (name: "output_dims", ty: IVec2),
        ]
    ),
    // Push constants for rendering the procedural sky box.
    (
        name: "SkyBoxRenderPushConstants",
        no_mangle: false,
        fields: [
            (name: "sun_direction", ty: Vec4),
        ]  
    ),
    // Push constants for diffuse irradiance gathering.
    (
        name: "DiGatherPushConstants",
        no_mangle: false,
        fields: [
            (name: "sample_dim", ty: U32),
            (name: "sun_direction", ty: Vec4),
        ]
    ),
    // Push constants for doing parallel reduction on gathered diffuse irradiance spherical 
    // harmonic coefficients.
    (
        name: "DiParReducePushConstants",
        no_mangle: false,
        fields: [
            (name: "construct_prefiltering_matrices", ty: U32),
            (name: "block_size", ty: U32),
        ]
    ),
    // Push constants for environment map prefiltering.
    (
        name: "EnvPrefilterPushConstants",
        no_mangle: false,
        fields: [
            (name: "roughness", ty: F32),
        ]
    ),
    // Push constants for GUI rendering.
    (
        name: "GuiPushConstants",
        no_mangle: false,
        fields: [
            (name: "screen_size", ty: Vec2),
            (name: "texture_id", ty: U32),
        ]
    ),
    // Push constants for GTAO.
    (
        name: "GtaoPushConstants",
        no_mangle: false,
        fields: [
            (name: "viewport_size", ty: IVec2),
            (name: "viewport_pixel_size", ty: Vec2),
            (name: "camera_near_clip", ty: F32),
            (name: "camera_tan_half_fov", ty: Vec2),
            (name: "ndc_to_view_mul", ty: Vec2),
            (name: "ndc_to_view_add", ty: Vec2),
            (name: "ndc_to_view_mul_x_pixel_size", ty: Vec2),
            (name: "effect_radius", ty: F32),
            (name: "effect_falloff_range", ty: F32),
            (name: "radius_multiplier", ty: F32),
            (name: "final_value_power", ty: F32),
            (name: "denoise_blur_beta", ty: F32),
            (name: "bilateral_filter_d", ty: F32),
            (name: "bilateral_filter_r", ty: F32),
            (name: "sample_distribution_power", ty: F32),
            (name: "thin_occluder_compensation", ty: F32),
            (name: "depth_mip_sampling_offset", ty: F32),
            (name: "blur_dir", ty: IVec2),
        ]
    ),
    // Push constants for SMAA.
    (
        name: "SmaaPushConstants",
        no_mangle: false,
        fields: [
            (name: "rt_metrics", ty: Vec4),
            (name: "screen_dims", ty: UVec2),
        ]
    ),
]