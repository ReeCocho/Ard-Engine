[
    // Globally accessible data for a frame in a scene renderer.
    (
        name: "Global",
        bindings: [
            // All objects.
            (
                name: "GlobalObjectData",
                stage: AllGraphics,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: None,
                    unbounded_array: Some((name: "object_data", ty: Struct("ObjectData"))),
                )
            ),
            // Instance to object ID mapping.
            (
                name: "ObjectIds",
                stage: AllGraphics,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: None,
                    unbounded_array: Some((name: "object_ids", ty: U32)),
                )
            ),
            // Global lighting data (sun).
            (
                name: "GlobalLightingInfo",
                stage: AllGraphics,
                count: "1",
                data: Ubo((
                    name: "global_lighting",
                    ty: Struct("GlobalLighting"),
                ))
            ),
            // Shadow cascades
            (
                name: "ShadowCascades",
                stage: AllGraphics,
                count: "MAX_SHADOW_CASCADES",
                data: ShadowTextureArray("shadow_cascades")
            ),
            // Sun shadowing info
            (
                name: "SunShadowInfo",
                stage: AllGraphics,
                count: "1",
                data: Ubo((
                    name: "sun_shadow_info",
                    ty: Struct("SunShadows"),
                ))
            ),
            // Ambient occlusion image.
            (
                name: "AoImage",
                stage: AllGraphics,
                count: "1",
                data: Texture("ao_image")
            ),
            // Global light buffer.
            (
                name: "Lights",
                stage: AllGraphics,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: None,
                    unbounded_array: Some((name: "lights", ty: Struct("Light"))),
                )
            ),
            // Clusters of indices of lights.
            (
                name: "LightClusters",
                stage: AllGraphics,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: Some((name: "light_table", ty: Struct("LightTable"))),
                    unbounded_array: None,
                )
            ),
        ]
    ),
    // Per material and texture slot bindings.
    (
        name: "Materials",
        bindings: [
            // Material data SSBO
            (
                name: "Data",
                stage: AllGraphics,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: None,
                    unbounded_array: Some((name: "material_data", ty: Struct("ArdMaterialData"))),
                )
            ),
            // Texture slots SSBO
            (
                name: "TextureSlots",
                stage: AllGraphics,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: None,
                    unbounded_array: Some((name: "texture_slots", ty: Array(ty: U32, len: "MAX_TEXTURES_PER_MATERIAL"))),
                )
            )
        ]  
    ),
    // Bindless textures layout.
    (
        name: "Textures",
        bindings: [
            (
                name: "Textures",
                stage: AllGraphics,
                count: "MAX_TEXTURES",
                data: UnboundedTextureArray("textures"),
            )
        ]
    ),
    // Camera including froxels for clustering
    (
        name: "Camera",
        bindings: [
            (
                name: "CameraUbo",
                stage: AllStages,
                count: "1",
                data: Ubo((
                    name: "camera",
                    ty: Struct("Camera"),
                ))
            ),
            (
                name: "CameraFroxels",
                stage: AllStages,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: Some((name: "froxels", ty: Struct("Froxels"))),
                    unbounded_array: None,
                )
            )
        ]
    ),
    // Camera froxel generation.
    (
        name: "FroxelGen",
        bindings: [
            (
                name: "CameraUbo",
                stage: Compute,
                count: "1",
                data: Ubo((
                    name: "camera",
                    ty: Struct("Camera"),
                ))
            ),
            (
                name: "CameraFroxels",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: WriteOnly,
                    inner: Some((name: "froxels", ty: Struct("Froxels"))),
                    unbounded_array: None,
                )
            )
        ]
    ),
    // Hierarchical z-buffer generation.
    (
        name: "HzbGen",
        bindings: [
            (
                name: "InputDepth",
                stage: Compute,
                count: "1",
                data: Texture("input_depth_buffer"),
            ),
            (
                name: "OutputDepth",
                stage: Compute,
                count: "1",
                data: StorageImage(
                    field_name: "output_depth_buffer",
                    restrict: true,
                    access: WriteOnly,
                    format: R32F,
                )
            )
        ]
    ),
    // Draw call generation.
    (
        name: "DrawGen",
        bindings: [
            (
                name: "DrawCalls",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadWrite,
                    inner: None,
                    unbounded_array: Some((name: "draw_calls", ty: Struct("DrawCall"))),
                )
            ),
            (
                name: "Objects",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: None,
                    unbounded_array: Some((name: "objects", ty: Struct("ObjectData"))),
                )
            ),
            (
                name: "InputIds",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: None,
                    unbounded_array: Some((name: "input_ids", ty: Struct("ObjectId"))),
                )
            ),
            (
                name: "OutputIds",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: WriteOnly,
                    inner: None,
                    unbounded_array: Some((name: "output_ids", ty: U32)),
                )
            ),
            (
                name: "HzbImage",
                stage: Compute,
                count: "1",
                data: Texture("hzb_image"),
            )
        ]
    ),
    // Draw call generation WITHOUT hzb culling.
    (
        name: "DrawGenNoHzb",
        bindings: [
            (
                name: "DrawCalls",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadWrite,
                    inner: None,
                    unbounded_array: Some((name: "draw_calls", ty: Struct("DrawCall"))),
                )
            ),
            (
                name: "Objects",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: None,
                    unbounded_array: Some((name: "objects", ty: Struct("ObjectData"))),
                )
            ),
            (
                name: "InputIds",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: None,
                    unbounded_array: Some((name: "input_ids", ty: Struct("ObjectId"))),
                )
            ),
            (
                name: "OutputIds",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: WriteOnly,
                    inner: None,
                    unbounded_array: Some((name: "output_ids", ty: U32)),
                )
            )
        ]
    ),
    // Draw call compaction.
    (
        name: "DrawCompact",
        bindings: [
            (
                name: "DrawCallsSrc",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: None,
                    unbounded_array: Some((name: "draw_calls_src", ty: Struct("DrawCall"))),
                )
            ),
            (
                name: "DrawCallsDst",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadWrite,
                    inner: None,
                    unbounded_array: Some((name: "draw_calls_dst", ty: Struct("DrawCall"))),
                )
            ),
            (
                name: "DrawCounts",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadWrite,
                    inner: None,
                    unbounded_array: Some((name: "draw_counts", ty: U32)),
                )
            )
        ],
    ),
    // Light clustering.
    (
        name: "LightClustering",
        bindings: [
            (
                name: "Lights",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: None,
                    unbounded_array: Some((name: "lights", ty: Struct("Light"))),
                )
            ),
            (
                name: "LightClusters",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadWrite,
                    inner: Some((name: "light_table", ty: Struct("LightTable"))),
                    unbounded_array: None,
                )
            )
        ]
    ),
    // AO construction.
    (
        name: "AoConstruct",
        bindings: [
            (
                name: "DepthTexture",
                stage: Compute,
                count: "1",
                data: Texture("depth_tex")
            ),
            (
                name: "AoImage",
                stage: Compute,
                count: "1",
                data: StorageImage(
                    field_name: "ao_image",
                    restrict: true,
                    access: WriteOnly,
                    format: R16F,
                )
            ),
            (
                name: "NoiseTexture",
                stage: Compute,
                count: "1",
                data: Texture("noise_tex")
            ),
            (
                name: "KernelSamples",
                stage: Compute,
                count: "1",
                data: Ubo((
                    name: "samples",
                    ty: Array(name: "samples", ty: Vec4, len: "KERNEL_SIZE")
                ))
            )
        ]
    ),
    // AO blurring.
    (
        name: "AoBlur",
        bindings: [
            (
                name: "InputTexture",
                stage: Compute,
                count: "1",
                data: Texture("input_tex")
            ),
            (
                name: "AoImage",
                stage: Compute,
                count: "1",
                data: StorageImage(
                    field_name: "ao_image",
                    restrict: true,
                    access: WriteOnly,
                    format: R16F,
                )
            )
        ],
    ),
    // Adaptive luminance histogram generation.
    (
        name: "HistogramGen",
        bindings: [
            (
                name: "InputTexture",
                stage: Compute,
                count: "1",
                data: Texture("hdr_src")
            ),
            (
                name: "Histogram",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadWrite,
                    inner: Some((name: "histogram", ty: Array(ty: U32, len: "ADAPTIVE_LUM_HISTOGRAM_SIZE"))),
                    unbounded_array: None,
                )
            )
        ]
    ),
    // Adaptive luminance.
    (
        name: "AdaptiveLum",
        bindings: [
            (
                name: "Histogram",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadWrite,
                    inner: Some((name: "histogram", ty: Array(ty: U32, len: "ADAPTIVE_LUM_HISTOGRAM_SIZE"))),
                    unbounded_array: None,
                )
            ),
            (
                name: "Luminance",
                stage: Compute,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadWrite,
                    inner: Some((name: "out_luminance", ty: F32)),
                    unbounded_array: None,
                )
            )
        ]
    ),
    // Tonemapping.
    (
        name: "Tonemapping",
        bindings: [
            (
                name: "SourceImage",
                stage: Fragment,
                count: "1",
                data: Texture("screen_tex")
            ),
            (
                name: "Luminance",
                stage: Fragment,
                count: "1",
                data: Ssbo(
                    restrict: true,
                    access: ReadOnly,
                    inner: Some((name: "luminance", ty: F32)),
                    unbounded_array: None,
                )
            )
        ]
    )
]