#version 460
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_ray_tracing : enable

#define ARD_SET_REFLECTION_RT_PASS 0
#define ARD_SET_CAMERA 1
#include "ard_bindings.glsl"

layout(location = 0) rayPayloadEXT ReflectionRayPayload hit_value;

void main() {
    // Derive the ray position and direction from screen coordinates
	const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	vec2 in_uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    in_uv.y = 1.0 - in_uv.y;
	const vec2 d = in_uv * 2.0 - 1.0;

    vec3 center = camera[0].position.xyz;
    vec4 pos = camera[0].projection_inv * vec4(d, 0.0, 1.0);
    vec4 dir = camera[0].view_inv * vec4(normalize(pos.xyz), 0.0);

    // Fire a ray toward the pixel
    float tmin = 0.001;
	float tmax = 10000.0;

    vec4 color = vec4(1.0);
    for (uint i = 0; i < 8; i++) {
        // Trace a ray to see if we hit a surface
        traceRayEXT(
            tlas, 
            gl_RayFlagsOpaqueEXT, 
            0xff, 0, 0, 0, 
            center, 
            tmin, 
            dir.xyz,
            tmax, 
            0
        );

        // Decode the color
        const vec4 dec_color = vec4(
            unpackHalf2x16(hit_value.color.x),
            unpackHalf2x16(hit_value.color.y)
        );
        color.rgb *= dec_color.rgb;

        // If we hit nothing, or this is the last iteration, stop.
        if (hit_value.hit == 0) {
            break;
        }

        // Otherwise, update the center and direction vectors and try again
        center = hit_value.location.xyz;
        dir.xyz = normalize(reflect(dir.xyz, hit_value.normal.xyz));
    }
    
    imageStore(out_tex, ivec2(gl_LaunchIDEXT.xy), vec4(color.rgb, 1.0));
}