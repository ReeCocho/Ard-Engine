#version 460
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_ray_tracing : enable

#define ARD_SET_PATH_TRACER_PASS 0
#define ARD_SET_CAMERA 1
#include "ard_bindings.glsl"
#include "pbr_brdf.glsl"

layout(location = 0) rayPayloadEXT PathTracerPayload hit_value;

layout(push_constant) uniform constants {
    PathTracerPushConstants consts;
};

// Random number generation using pcg32i_random_t, using inc = 1. Our random state is a uint.
uint stepRNG(uint rngState) {
    return rngState * 747796405 + 1;
}

// Steps the RNG and returns a floating-point value between 0 and 1 exclusive.
float rng_float(inout uint rngState) {
    // Condensed version of pcg_output_rxs_m_xs_32_32, with simple conversion to floating-point [0,1].
    rngState  = stepRNG(rngState);
    uint word = ((rngState >> ((rngState >> 28) + 4)) ^ rngState) * 277803737;
    word      = (word >> 22) ^ word;
    return min(float(word) / 4294967295.0, 0.999999);
}

void main() {
    // Compute a random seed based on pixel location and sample index
    uint rng_state = (consts.sample_batch * gl_LaunchSizeEXT.x * gl_LaunchSizeEXT.y) 
        + gl_LaunchSizeEXT.x * gl_LaunchIDEXT.y + gl_LaunchIDEXT.x;

    // Pick a random sample within the pixel
	const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) 
        + vec2(rng_float(rng_state), rng_float(rng_state));
	vec2 in_uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    in_uv.y = 1.0 - in_uv.y;
	const vec2 d = in_uv * 2.0 - 1.0;

    vec3 center = camera[0].position.xyz;
    vec4 pos = camera[0].projection_inv * vec4(d, 0.0, 1.0);
    vec4 dir = camera[0].view_inv * vec4(normalize(pos.xyz), 0.0);

    // Fire a ray toward the pixel
    float tmin = 0.001;
	float tmax = 10000.0;

    vec3 L = vec3(0.0);
    vec3 beta = vec3(1.0);

    vec4 dec_color = vec4(0.0);
    const vec3 sun_color = global_lighting.sun_color_intensity.rgb
        * global_lighting.sun_color_intensity.a;
    const vec3 n_sun_dir = -normalize(global_lighting.sun_direction.xyz);

    uint i = 0;
    for (; i < 4; i++) {
        // Store sun direction so we can evaluate the BRDF in the hit shader
        hit_value.sun_dir = vec4(n_sun_dir, 0.0);
        hit_value.rng_state = rng_state;

        // Trace a ray to see if we hit a surface
        traceRayEXT(
            tlas, 
            gl_RayFlagsOpaqueEXT, 
            0xff, 0, 0, 0, 
            center, 
            tmin, 
            dir.xyz,
            tmax, 
            0
        );

        // Extract hit surface properties
        const vec4 in_brdf_pdf = hit_value.in_brdf_pdf;
        const vec4 out_brdf_pdf = hit_value.out_brdf_pdf;
        const vec3 location = hit_value.location.xyz;
        dir = hit_value.sun_dir;
        center = location;

        // If we hit nothing, it's the sky, so stop.
        if (hit_value.hit == 0) {
            L += beta * in_brdf_pdf.rgb;
            break;
        }

        // If we hit something, update our RNG state
        rng_state = hit_value.rng_state;

        // Trace shadow ray for the sun 
        traceRayEXT(
            tlas, 
            gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT, 
            0xff, 0, 0, 0, 
            location, 
            tmin, 
            n_sun_dir,
            tmax, 
            0
        );

        // If we hit the sky, apply lighting to sum
        if (hit_value.hit == 0) {
            L += (beta * in_brdf_pdf.rgb * sun_color);
        }

        // Evalute BRDF
        if (out_brdf_pdf.w < 0.0001) {
            break;
        }

        beta *= out_brdf_pdf.rgb / out_brdf_pdf.w;

        // If our current color is almost black, we can early out
        if (dot(beta, vec3(1.0)) < 0.001) {
            break;
        }
    }
    
    if (consts.sample_batch != 0) {
        const float batch = float(consts.sample_batch);
        const vec3 old_color = imageLoad(out_tex, ivec2(gl_LaunchIDEXT.xy)).rgb;
        L = (batch * old_color + L) / (batch + 1.0);
    }

    if (any(isnan(L)) || any(isinf(L))) {
        return;
    }

    imageStore(out_tex, ivec2(gl_LaunchIDEXT.xy), vec4(L, 1.0));
}