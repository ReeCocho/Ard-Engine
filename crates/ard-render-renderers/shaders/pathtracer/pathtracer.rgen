#version 460
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_ray_tracing : enable

#define ARD_SET_PATH_TRACER_PASS 0
#define ARD_SET_CAMERA 1
#include "ard_bindings.glsl"
#include "pbr_brdf.glsl"

layout(location = 0) rayPayloadEXT PathTracerPayload hit_value;

layout(push_constant) uniform constants {
    PathTracerPushConstants consts;
};

// Random number generation using pcg32i_random_t, using inc = 1. Our random state is a uint.
uint stepRNG(uint rngState) {
    return rngState * 747796405 + 1;
}

// Steps the RNG and returns a floating-point value between 0 and 1 exclusive.
float rng_float(inout uint rngState) {
    // Condensed version of pcg_output_rxs_m_xs_32_32, with simple conversion to floating-point [0,1].
    rngState  = stepRNG(rngState);
    uint word = ((rngState >> ((rngState >> 28) + 4)) ^ rngState) * 277803737;
    word      = (word >> 22) ^ word;
    return min(float(word) / 4294967295.0, 0.999999);
}

float luminance(vec3 color) {
    return clamp(dot(color, vec3(0.2126, 0.7152, 0.0722)), 0.0, 1.0);
}

bool is_lambertian(
    float ndotv, 
    float metallic, 
    float roughness,
    vec3 color,
    vec3 F0,
    inout uint rng_state
) {
    const float dielectric_pr = 1.0 - roughness; // specular_f_roughness(ndotv, F0, roughness).r;
    float diff_pr = (1.0 - dielectric_pr);

    const float inv_total_pr = 1.0 / (diff_pr + dielectric_pr);
    diff_pr *= inv_total_pr;

    return rng_float(rng_state) <= 0.5;
}

vec4 compute_brdf_pdf(
    vec3 L,
    vec3 N,
    vec3 V,
    vec3 color,
    vec3 F0,
    float roughness,
    float metallic
) {
    const float ndotl = max(dot(N, L), 0.0);

    // End early if the outputs would be too small
    if (ndotl < 0.0001) {
        return vec4(vec3(0.0), 1.0);
    }

    // Evaluate both lambertian and GGX brdfs
    const vec3 diffuse = color * INV_PI;
    const float diffuse_pdf = ndotl;

    const vec3 H = normalize(L + V);
    const float ndotv = max(dot(N, V), 0.0);
    const float vdoth = max(dot(V, H), 0.0);
    const float ndoth = max(dot(N, H), 0.0);

    const float d = specular_d(N, H, roughness);
    const vec3 f = specular_f(V, H, F0);
    const float g = specular_g(ndotv, ndotl, roughness);
    const vec3 num = d * g * f;
    const float denom = (4.0 * ndotl * ndotv) + 0.00001;
    vec3 spec = num / denom;
    const float spec_pdf = get_ggx_pdf(N, H, V, roughness);

    // Final PDF is the average
    const float pdf = (diffuse_pdf + spec_pdf) * 0.5;

    // Energy conserving blend of both PDFs
    const vec3 kS = f;
    const vec3 kD = (1.0 - metallic) * (vec3(1.0) - kS);

    return vec4(
        ndotl * ((kD * diffuse) + spec),
        pdf
    );
}

void main() {
    // Compute a random seed based on pixel location and sample index
    uint rng_state = (consts.sample_batch * gl_LaunchSizeEXT.x * gl_LaunchSizeEXT.y) 
        + gl_LaunchSizeEXT.x * gl_LaunchIDEXT.y + gl_LaunchIDEXT.x;

    // Pick a random sample within the pixel
	const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) 
        + vec2(rng_float(rng_state), rng_float(rng_state));
	vec2 in_uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    in_uv.y = 1.0 - in_uv.y;
	const vec2 d = in_uv * 2.0 - 1.0;

    vec3 center = camera[0].position.xyz;
    vec4 pos = camera[0].projection_inv * vec4(d, 0.0, 1.0);
    vec4 dir = camera[0].view_inv * vec4(normalize(pos.xyz), 0.0);

    // Fire a ray toward the pixel
    float tmin = 0.001;
	float tmax = 10000.0;

    vec3 L = vec3(0.0);
    vec3 beta = vec3(1.0);

    vec4 dec_color = vec4(0.0);

    uint i = 0;
    for (; i < 4; i++) {
        // Trace a ray to see if we hit a surface
        traceRayEXT(
            tlas, 
            gl_RayFlagsOpaqueEXT, 
            0xff, 0, 0, 0, 
            center, 
            tmin, 
            dir.xyz,
            tmax, 
            0
        );

        // Decode the color and combine with final output color
        const vec3 color = hit_value.color.rgb;

        // If we hit nothing, it's the sky, so stop.
        if (hit_value.hit == 0) {
            L += beta * color;
            break;
        }

        // Extract material properties
        const vec3 V = -dir.xyz;
        const vec3 N = hit_value.normal.xyz;
        const vec3 location = hit_value.location.xyz + (N * 0.02);
        const mat3 TBN = mat3(
            hit_value.tangent.xyz,
            hit_value.bitangent.xyz,
            hit_value.normal.xyz
        );
        const float metallic = hit_value.metallic;
        const float roughness = hit_value.roughness;

        const float ndotv = max(dot(N, V), 0.0);

        vec3 F0 = vec3(0.04);

        // Decide if we're lambertian (alternative is specular/metallic)
        const bool lambertian = is_lambertian(
            ndotv,
            metallic,
            roughness,
            color,
            vec3(0.04),
            rng_state
        );

        // Upate F0 based on metallicness
        F0 = mix(F0, color.rgb, metallic);

        // Evaluate the BRDF for lights (currently, just the sun)
        const vec3 n_sun_dir = -normalize(global_lighting.sun_direction.xyz);
        traceRayEXT(
            tlas, 
            gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT, 
            0xff, 0, 0, 0, 
            location, 
            tmin, 
            n_sun_dir,
            tmax, 
            0
        );

        if (hit_value.hit == 0) {
            const vec3 sun_color = global_lighting.sun_color_intensity.rgb
                * global_lighting.sun_color_intensity.a;

            // Compute the BRDF and PDF.
            vec4 brdf_pdf = compute_brdf_pdf(n_sun_dir, N, V, color, F0, roughness, metallic);

            // Apply to final lighting
            L += (beta * brdf_pdf.rgb * sun_color);
        }

        // Generate a new ray direction and position and apply BRDF
        center = location;
        vec3 L = vec3(0.0);
        vec3 H = vec3(0.0);
        float pdf = 0.0;
        const vec2 rand_vec = vec2(rng_float(rng_state), rng_float(rng_state));

        // Compute L and H based on our BRDF
        if (lambertian) {
            L = normalize(TBN * get_cosine_hemisphere(rand_vec));
            H = normalize(L + V);
        } else {
            H = normalize(TBN * get_ggx_microfacet(rand_vec, roughness));
            L = normalize(reflect(-V, H));
        }

        // New direction for next bounce
        dir.xyz = L;

        // Evalute BRDF
        vec4 brdf = compute_brdf_pdf(L, N, V, color, F0, roughness, metallic);
        if (brdf.w < 0.0001) {
            break;
        }

        beta *= brdf.rgb / brdf.w;

        if (dot(beta, vec3(1.0)) < 0.001) {
            break;
        }

        /*
        if (lambertian) {
            L = get_cosine_hemisphere(rand_vec);
            pdf = L.z;
            L = normalize(TBN * L);

            const float ndotl = max(dot(N, L), 0.0);
            dir.xyz = L;
            beta *= color.rgb * ndotl / (pdf + 0.0001);
        } else {
            const vec3 H = normalize(TBN * get_ggx_microfacet(rand_vec, roughness));
            L = normalize(reflect(-V, H));
            pdf = get_ggx_pdf(N, H, V, roughness);
            dir.xyz = L;
            
            // Early out if we're perfectly perpendicular
            const float ndotl = max(dot(N, L), 0.0);
            if (ndotl <= 0.0001) {
                continue;
            }

            // Evaluate the BRDF
            const float vdoth = max(dot(V, H), 0.0);
            const float ndoth = max(dot(N, H), 0.0);

            const vec3 f = specular_f(V, H, F0);
            const float g = specular_g(ndotv, ndotl, roughness);

            beta *= (color.rgb * f * g * vdoth) / (ndoth * ndotv + 0.0001);
        }
        */
    }
    
    if (consts.sample_batch != 0) {
        const float batch = float(consts.sample_batch);
        const vec3 old_color = imageLoad(out_tex, ivec2(gl_LaunchIDEXT.xy)).rgb;
        L = (batch * old_color + L) / (batch + 1.0);
    }

    imageStore(out_tex, ivec2(gl_LaunchIDEXT.xy), vec4(L, 1.0));
}