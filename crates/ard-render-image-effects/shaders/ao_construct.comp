#version 450 core
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

const uint BLOCK_SIZE = 8;
const uint TILE_BORDER = 1;
const uint TILE_SIZE = BLOCK_SIZE + TILE_BORDER * 2;
const uint KERNEL_SIZE = 64;

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

#define ARD_SET_AO_CONSTRUCT 0
#define ARD_SET_CAMERA 1
#include "ard_bindings.glsl"

layout(push_constant) uniform constants {
    AoConstructPushConstants consts;
};

/// View-space positions
shared vec2 tile_xy[TILE_SIZE * TILE_SIZE];
shared float tile_z[TILE_SIZE * TILE_SIZE];

vec3 reconstruct_position(vec2 uv, float z) {
    float x = uv.x * 2.0 - 1.0;
    float y = (1.0 - uv.y) * 2.0 - 1.0;
    vec4 position_s = vec4(x, y, z, 1.0);
    vec4 position_v = camera.projection_inv * position_s;
    return position_v.xyz / position_v.w;
}

uvec2 unflatten2D(uint i, uint dim) {
    return uvec2(
        i % dim,
        i / dim
    );
}

uint flatten2D(uvec2 coord, uint dim) {
    return coord.x + coord.y * dim;
}

void main() {
    // Preload shared memory with positions
    const ivec2 tile_upper_left = 
        ivec2(gl_WorkGroupID.xy) * ivec2(BLOCK_SIZE) - ivec2(TILE_BORDER);
        
    for (
        uint i = gl_LocalInvocationIndex; 
        i < TILE_SIZE * TILE_SIZE; 
        i += (BLOCK_SIZE * BLOCK_SIZE)
    ) {
        const uvec2 pixel = tile_upper_left + unflatten2D(i, TILE_SIZE);
        const vec2 uv = (vec2(pixel) + vec2(0.5)) * consts.inv_render_area;
        const float depth = texture(depth_tex, uv).r;

        vec3 position = reconstruct_position(uv, depth);

        tile_xy[i] = position.xy;
        tile_z[i] = position.z;
    }

    barrier();

    // Load view-space Z values in a cross pattern and compare
    ivec2 liid = ivec2(gl_LocalInvocationID.xy);
    const uint cross_idx[5] = {
        flatten2D(ivec2(TILE_BORDER) + liid.xy, TILE_SIZE),			        // 0: center
        flatten2D(ivec2(TILE_BORDER) + liid.xy + ivec2(1, 0), TILE_SIZE),	// 1: right
        flatten2D(ivec2(TILE_BORDER) + liid.xy + ivec2(-1, 0), TILE_SIZE),	// 2: left
        flatten2D(ivec2(TILE_BORDER) + liid.xy + ivec2(0, 1), TILE_SIZE),	// 3: down
        flatten2D(ivec2(TILE_BORDER) + liid.xy + ivec2(0, -1), TILE_SIZE),	// 4: up
    };

    const float center_z = tile_z[cross_idx[0]];
    const uint best_z_horizontal = 
        abs(tile_z[cross_idx[1]] - center_z) < abs(tile_z[cross_idx[2]] - center_z) ? 1 : 2;
    const uint best_z_vertical = 
        abs(tile_z[cross_idx[3]] - center_z) < abs(tile_z[cross_idx[4]] - center_z) ? 3 : 4;

    // Construct the normal
    vec3 P1 = vec3(0); 
    vec3 P2 = vec3(0);
    if (best_z_horizontal == 1 && best_z_vertical == 4) {
        P1 = vec3(tile_xy[cross_idx[1]], tile_z[cross_idx[1]]);
        P2 = vec3(tile_xy[cross_idx[4]], tile_z[cross_idx[4]]);
    }
    else if (best_z_horizontal == 1 && best_z_vertical == 3) {
        P1 = vec3(tile_xy[cross_idx[3]], tile_z[cross_idx[3]]);
        P2 = vec3(tile_xy[cross_idx[1]], tile_z[cross_idx[1]]);
    }
    else if (best_z_horizontal == 2 && best_z_vertical == 4) {
        P1 = vec3(tile_xy[cross_idx[4]], tile_z[cross_idx[4]]);
        P2 = vec3(tile_xy[cross_idx[2]], tile_z[cross_idx[2]]);
    }
    else if (best_z_horizontal == 2 && best_z_vertical == 3) {
        P1 = vec3(tile_xy[cross_idx[2]], tile_z[cross_idx[2]]);
        P2 = vec3(tile_xy[cross_idx[3]], tile_z[cross_idx[3]]);
    }

    const vec3 P0 = vec3(tile_xy[cross_idx[0]], tile_z[cross_idx[0]]);

    // Compute uv, normal, and position for this texel
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(consts.render_area);
    const vec3 normal = normalize(cross(P2 - P0, P1 - P0));
    const vec3 position = P0;

    const vec3 random_vec = normalize(vec3(texture(noise_tex, uv * consts.noise_scale).xy, 0.0));

    // Compute TBN via Graham-Schmidt
    vec3 tangent = normalize(random_vec - normal * dot(random_vec, normal));
    vec3 bitangent = cross(normal, tangent);
    mat3 TBN = mat3(tangent, bitangent, normal);

    // Iterate over sample kernel and compute occlusion factor
    float occlusion = 0.0;
    for (int i = 0; i < KERNEL_SIZE / 2; ++i) {
        // Get sample position
        vec3 sample_pos = TBN * normalize(samples[i].xyz);
        sample_pos = position + sample_pos * consts.radius;

        vec4 offset = vec4(sample_pos, 1.0);
        offset = camera.projection * offset;
        offset.w = 1.0 / offset.w;
        offset *= offset.w;
        offset.xy = offset.xy * 0.5 + 0.5;
        offset.y = 1.0 - offset.y;

        float sample_depth = camera.near_clip / texture(depth_tex, offset.xy).r;

        float range_check = smoothstep(0.0, 1.0, consts.radius / abs(position.z - sample_depth));
        occlusion += sample_depth <= sample_pos.z - consts.bias ? range_check : 0.0;
    }
    occlusion = 1.0 - (occlusion / (KERNEL_SIZE / 2));

    // Store AO result
    imageStore(
        ao_image,
        ivec2(gl_GlobalInvocationID.xy),
        vec4(occlusion)
    );
}