#version 450
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_control_flow_attributes: enable

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

#define ARD_SET_FROXEL_GEN 0
#include "ard_bindings.glsl"

void main() {
    // Corners are clockwise so we get correct normals when computing the plane
    vec4 corners[4];
    corners[0] = vec4(
        ((float(gl_LocalInvocationID.x + 0) / float(CAMERA_FROXELS_WIDTH)) * 2.0) - 1.0,
        ((float(gl_LocalInvocationID.y + 0) / float(CAMERA_FROXELS_HEIGHT)) * 2.0) - 1.0,
        1.0,
        1.0
    );

    corners[1] = vec4(
        ((float(gl_LocalInvocationID.x + 1) / float(CAMERA_FROXELS_WIDTH)) * 2.0) - 1.0,
        ((float(gl_LocalInvocationID.y + 0) / float(CAMERA_FROXELS_HEIGHT)) * 2.0) - 1.0,
        1.0,
        1.0
    );

    corners[2] = vec4(
        ((float(gl_LocalInvocationID.x + 1) / float(CAMERA_FROXELS_WIDTH)) * 2.0) - 1.0,
        ((float(gl_LocalInvocationID.y + 1) / float(CAMERA_FROXELS_HEIGHT)) * 2.0) - 1.0,
        1.0,
        1.0
    );

    corners[3] = vec4(
        ((float(gl_LocalInvocationID.x + 0) / float(CAMERA_FROXELS_WIDTH)) * 2.0) - 1.0,
        ((float(gl_LocalInvocationID.y + 1) / float(CAMERA_FROXELS_HEIGHT)) * 2.0) - 1.0,
        1.0,
        1.0
    );

    corners[0] = camera.projection_inv * corners[0];
    corners[1] = camera.projection_inv * corners[1];
    corners[2] = camera.projection_inv * corners[2];
    corners[3] = camera.projection_inv * corners[3];

    corners[0] /= corners[0].w;
    corners[1] /= corners[1].w;
    corners[2] /= corners[2].w;
    corners[3] /= corners[3].w;

    froxels.frustums
        [gl_LocalInvocationID.x]
        [gl_LocalInvocationID.y]
        [0] = vec4(normalize(cross(corners[1].xyz, corners[0].xyz)), 1.0);

    froxels.frustums
        [gl_LocalInvocationID.x]
        [gl_LocalInvocationID.y]
        [1] = vec4(normalize(cross(corners[2].xyz, corners[1].xyz)), 1.0);

    froxels.frustums
        [gl_LocalInvocationID.x]
        [gl_LocalInvocationID.y]
        [2] = vec4(normalize(cross(corners[3].xyz, corners[2].xyz)), 1.0);

    froxels.frustums
        [gl_LocalInvocationID.x]
        [gl_LocalInvocationID.y]
        [3] = vec4(normalize(cross(corners[0].xyz, corners[3].xyz)), 1.0);

    // Computing min and max Z over the entire depth
    const float f_over_n = camera.far_clip / camera.near_clip;

    // NOTE: For this to work, CAMERA_FROXELS_WIDTH * CAMERA_FROXELS_HEIGHT >= CAMERA_FROXELS_DEPTH
    if (gl_LocalInvocationIndex < CAMERA_FROXELS_DEPTH) {
        float near = 
            camera.near_clip * 
            pow(f_over_n, float(gl_LocalInvocationIndex) / float(CAMERA_FROXELS_DEPTH));

        float far = 
            gl_LocalInvocationIndex == CAMERA_FROXELS_DEPTH - 1 ? 
            uintBitsToFloat(0x7F800000) : 
            camera.near_clip * 
            pow(f_over_n, float(gl_LocalInvocationIndex + 1) / float(CAMERA_FROXELS_DEPTH));

        froxels.min_max_z[gl_LocalInvocationIndex] = vec2(near, far);
    }

    for (uint z = 0; z < CAMERA_FROXELS_DEPTH; z++) {
        if (z == CAMERA_FROXELS_DEPTH - 1) {
            froxels.min_max_xy
                [gl_LocalInvocationID.x]
                [gl_LocalInvocationID.y]
                [z] = vec4(
                    uintBitsToFloat(0xFF800000),
                    uintBitsToFloat(0xFF800000),
                    uintBitsToFloat(0x7F800000),
                    uintBitsToFloat(0x7F800000)
                );
            break;
        }

        vec4[4] corners_near;
        vec4[4] corners_far;

        float near = 
            camera.near_clip * 
            pow(f_over_n, float(z) / float(CAMERA_FROXELS_DEPTH));

        float far = 
            camera.near_clip * 
            pow(f_over_n, float(z + 1) / float(CAMERA_FROXELS_DEPTH));

        corners_near[0] = vec4(
            ((float(gl_LocalInvocationID.x + 0) / float(CAMERA_FROXELS_WIDTH)) * 2.0) - 1.0,
            ((float(gl_LocalInvocationID.y + 0) / float(CAMERA_FROXELS_HEIGHT)) * 2.0) - 1.0,
            camera.near_clip / near,
            1.0
        );

        corners_near[1] = vec4(
            ((float(gl_LocalInvocationID.x + 1) / float(CAMERA_FROXELS_WIDTH)) * 2.0) - 1.0,
            ((float(gl_LocalInvocationID.y + 0) / float(CAMERA_FROXELS_HEIGHT)) * 2.0) - 1.0,
            camera.near_clip / near,
            1.0
        );

        corners_near[2] = vec4(
            ((float(gl_LocalInvocationID.x + 1) / float(CAMERA_FROXELS_WIDTH)) * 2.0) - 1.0,
            ((float(gl_LocalInvocationID.y + 1) / float(CAMERA_FROXELS_HEIGHT)) * 2.0) - 1.0,
            camera.near_clip / near,
            1.0
        );

        corners_near[3] = vec4(
            ((float(gl_LocalInvocationID.x + 0) / float(CAMERA_FROXELS_WIDTH)) * 2.0) - 1.0,
            ((float(gl_LocalInvocationID.y + 1) / float(CAMERA_FROXELS_HEIGHT)) * 2.0) - 1.0,
            camera.near_clip / near,
            1.0
        );

        corners_far[0] = vec4(
            ((float(gl_LocalInvocationID.x + 0) / float(CAMERA_FROXELS_WIDTH)) * 2.0) - 1.0,
            ((float(gl_LocalInvocationID.y + 0) / float(CAMERA_FROXELS_HEIGHT)) * 2.0) - 1.0,
            camera.near_clip / far,
            1.0
        );

        corners_far[1] = vec4(
            ((float(gl_LocalInvocationID.x + 1) / float(CAMERA_FROXELS_WIDTH)) * 2.0) - 1.0,
            ((float(gl_LocalInvocationID.y + 0) / float(CAMERA_FROXELS_HEIGHT)) * 2.0) - 1.0,
            camera.near_clip / far,
            1.0
        );

        corners_far[2] = vec4(
            ((float(gl_LocalInvocationID.x + 1) / float(CAMERA_FROXELS_WIDTH)) * 2.0) - 1.0,
            ((float(gl_LocalInvocationID.y + 1) / float(CAMERA_FROXELS_HEIGHT)) * 2.0) - 1.0,
            camera.near_clip / far,
            1.0
        );

        corners_far[3] = vec4(
            ((float(gl_LocalInvocationID.x + 0) / float(CAMERA_FROXELS_WIDTH)) * 2.0) - 1.0,
            ((float(gl_LocalInvocationID.y + 1) / float(CAMERA_FROXELS_HEIGHT)) * 2.0) - 1.0,
            camera.near_clip / far,
            1.0
        );

        [[unroll]]
        for (uint i = 0; i < 4; i++) {
            corners_near[i] = camera.projection_inv * corners_near[i];
            corners_far[i] = camera.projection_inv * corners_far[i];

            corners_near[i] /= corners_near[i].w;
            corners_far[i] /= corners_far[i].w;
        }

        vec2 min_pt = corners_near[0].xy;
        vec2 max_pt = corners_near[0].xy;

        [[unroll]]
        for (int i = 0; i < 4; i++) {
            min_pt = min(min_pt.xy, corners_near[i].xy);
            min_pt = min(min_pt.xy, corners_far[i].xy);
            max_pt = max(max_pt.xy, corners_near[i].xy);
            max_pt = max(max_pt.xy, corners_far[i].xy);
        }

        froxels.min_max_xy
            [gl_LocalInvocationID.x]
            [gl_LocalInvocationID.y]
            [z] = vec4(min_pt.xy, max_pt.xy);
    }
}