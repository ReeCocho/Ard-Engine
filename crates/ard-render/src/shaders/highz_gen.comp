#version 450

// Most of the code for this comes from here:
// https://www.rastergrid.com/blog/2010/10/hierarchical-z-map-based-occlusion-culling/

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

layout(set = 0, binding = 0) uniform sampler2D input_depth_buffer;
layout(set = 0, binding = 1, r32f) uniform restrict writeonly image2D output_depth_buffer;

layout(push_constant) uniform constants {
    ivec2 input_size;
    vec2 inv_output_size;
};

void main() {
    // Fetch a 2x2 texel region
    vec2 base_texel_coord = vec2(gl_GlobalInvocationID.xy) + vec2(0.5);
    
    vec2 gather_coord1 = (base_texel_coord + vec2(-0.5, -0.5)) * inv_output_size;
    vec2 gather_coord2 = (base_texel_coord + vec2(-0.5, 0.5)) * inv_output_size;
    vec2 gather_coord3 = (base_texel_coord + vec2(0.5, -0.5)) * inv_output_size;
    vec2 gather_coord4 = (base_texel_coord + vec2(0.5, 0.5)) * inv_output_size;

    float texel_value1 = texture(input_depth_buffer, gather_coord1).r;
    float texel_value2 = texture(input_depth_buffer, gather_coord2).r;
    float texel_value3 = texture(input_depth_buffer, gather_coord3).r;
    float texel_value4 = texture(input_depth_buffer, gather_coord4).r;

    // Find the minimum value of the gathered texels
    float min_depth = min(texel_value1, min(texel_value2, min(texel_value3, texel_value4)));
    // float min_depth = min(gathered_min.x, min(gathered_min.y, min(gathered_min.z, gathered_min.w)));

    imageStore(
        output_depth_buffer,
        ivec2(gl_GlobalInvocationID.xy),
        vec4(min_depth)
    );
}