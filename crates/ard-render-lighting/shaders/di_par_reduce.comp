#version 450
#extension GL_EXT_control_flow_attributes: enable
#extension GL_EXT_scalar_block_layout : enable

#define ARD_SET_DI_PAR_REDUCE 0
#include "ard_bindings.glsl"
#include "skybox.glsl"

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

layout(push_constant) uniform constants {
    DiParReducePushConstants consts;
};

// Shared memory to hold samples.
shared DiCoefficients[DI_REDUCE_BLOCK_SIZE] samples;

void main() {
    // Read in samples
    const uint tid = gl_LocalInvocationID.x;
    const uint block_idx = gl_WorkGroupID.x;
    const uint sample_idx = (block_idx * gl_WorkGroupSize.x) + tid;
    samples[tid] = di_samples[sample_idx];
    barrier();

    // Perform reduction
    for (uint s = consts.block_size / 2; s > 0; s >>= 1) {
        if (tid < s) {
            const DiCoefficients src = samples[tid + s];
            DiCoefficients dst = samples[tid];

            dst.samples[0] += src.samples[0];
            dst.samples[1] += src.samples[1];
            dst.samples[2] += src.samples[2];
            dst.samples[3] += src.samples[3];
            dst.samples[4] += src.samples[4];
            dst.samples[5] += src.samples[5];
            dst.samples[6] += src.samples[6];

            samples[tid] = dst;
        }
        barrier();
    }

    // Write back result to global memory or generate the final matrices
    if (tid == 0) {
        if (bool(consts.construct_prefiltering_matrices)) {
            const DiCoefficients fin = samples[0];
            const float c1 = 0.429043;
            const float c2 = 0.511664;
            const float c3 = 0.743125;
            const float c4 = 0.886227;
            const float c5 = 0.247708;

            // R0+0, G0+0, B0+0, R1+1
            // G1+1, B1+1, R1+0, G1+0
            // B1+0, R1-1, G1-1, B1-1
            // R2+1, G2+1, B2+1, R2-1
            // G2-1, B2-1, R2-2, G2-2
            // B2-2, R2+0, G2+0, B2+0
            // R2+2, G2+2, B2+2, NULL
            const vec3 L00  = fin.samples[0].rgb;
            const vec3 L1p1 = vec3(fin.samples[0].a,  fin.samples[1].rg);
            const vec3 L10  = vec3(fin.samples[1].ba, fin.samples[2].r );
            const vec3 L1n1 = fin.samples[2].gba;
            const vec3 L2p1 = fin.samples[3].rgb;
            const vec3 L2n1 = vec3(fin.samples[3].a,  fin.samples[4].rg);
            const vec3 L2n2 = vec3(fin.samples[4].ba, fin.samples[5].r );
            const vec3 L20  = fin.samples[5].gba;
            const vec3 L2p2 = fin.samples[6].rgb;

            prefiltering_mats.red = mat4(
                vec4(c1 * L2p2.r,  c1 * L2n2.r, c1 * L2p1.r, c2 * L1p1.r),
                vec4(c1 * L2n2.r, -c1 * L2p2.r, c1 * L2n1.r, c2 * L1n1.r),
                vec4(c1 * L2p1.r,  c1 * L2n1.r, c3 * L20.r,  c2 * L10.r),
                vec4(c2 * L1p1.r,  c2 * L1n1.r, c2 * L10.r,  (c4 * L00.r) - (c5 * L20.r))
            );

            prefiltering_mats.green = mat4(
                vec4(c1 * L2p2.g,  c1 * L2n2.g, c1 * L2p1.g, c2 * L1p1.g),
                vec4(c1 * L2n2.g, -c1 * L2p2.g, c1 * L2n1.g, c2 * L1n1.g),
                vec4(c1 * L2p1.g,  c1 * L2n1.g, c3 * L20.g,  c2 * L10.g),
                vec4(c2 * L1p1.g,  c2 * L1n1.g, c2 * L10.g,  (c4 * L00.g) - (c5 * L20.g))
            );

            prefiltering_mats.blue = mat4(
                vec4(c1 * L2p2.b,  c1 * L2n2.b, c1 * L2p1.b, c2 * L1p1.b),
                vec4(c1 * L2n2.b, -c1 * L2p2.b, c1 * L2n1.b, c2 * L1n1.b),
                vec4(c1 * L2p1.b,  c1 * L2n1.b, c3 * L20.b,  c2 * L10.b),
                vec4(c2 * L1p1.b,  c2 * L1n1.b, c2 * L10.b,  (c4 * L00.b) - (c5 * L20.b))
            );
        } else {
            di_samples[block_idx] = samples[0];
        }
    }
}