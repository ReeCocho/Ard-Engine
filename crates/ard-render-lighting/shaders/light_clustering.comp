#version 450
#extension GL_EXT_control_flow_attributes: enable
#extension GL_EXT_scalar_block_layout : enable
// #extension GL_EXT_debug_printf : enable

#define ARD_SET_CAMERA 0
#define ARD_SET_LIGHT_CLUSTERING 1
#include "ard_bindings.glsl"

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

layout(push_constant) uniform constants {
    LightClusteringPushConstants consts;
};

// Batch of lights to work on
#define SLICE_SIZE (CAMERA_FROXELS_WIDTH * CAMERA_FROXELS_HEIGHT)
shared vec4 shared_light_pos_rng[SLICE_SIZE];
shared uint shared_light_idx[SLICE_SIZE];
shared uint shared_lights_count;

void main() {
    const uint local_inv_idx = 
        (gl_LocalInvocationID.y * gl_WorkGroupSize.x) + gl_LocalInvocationID.x;

    const uint total_lights = consts.total_lights;

    const vec4[4] froxel_planes = froxels.frustums[gl_LocalInvocationID.x][gl_LocalInvocationID.y];
    const vec2 min_max_z = froxels.min_max_z[gl_WorkGroupID.z];

    vec3 min_pt = vec3(
        froxels.min_max_xy[gl_LocalInvocationID.x][gl_LocalInvocationID.y][gl_WorkGroupID.z].xy, 
        min_max_z.x
    );
    
    vec3 max_pt = vec3(
        froxels.min_max_xy[gl_LocalInvocationID.x][gl_LocalInvocationID.y][gl_WorkGroupID.z].zw,
        min_max_z.y
    );

    // Offset within the primary lights list
    uint lights_offset = 0;

    // Offset within the cluster list
    uint out_idx = 0;

    while (lights_offset < total_lights) {
        // Reset light count
        if (local_inv_idx == 0) {
            shared_lights_count = 0;
        }
        
        barrier();

        // Read a batch of lights into shared memory
        const uint batch_size = min(SLICE_SIZE, total_lights - lights_offset);

        if(local_inv_idx < batch_size) {
            const uint local_light_idx = lights_offset + local_inv_idx;

            // Transform to view space
            const Light light = lights[local_light_idx];
            const vec4 light_pos_hmg = vec4(light.position_range.xyz, 1.0);
            const float light_radius = light.position_range.w;
            const vec3 position = (camera[0].view * light_pos_hmg).xyz;

            // Early discard based on Z slice since all clusters share the same Z.
            const bool within_z_bounds =
                position.z - light_radius <= min_max_z.y &&
                position.z + light_radius >= min_max_z.x;

            // Early discard if outside of camera frustum.
            //
            // It's good to test for this since if we know that the light is outside the camera 
            // frustum it must also be outside of all froxels, meaning we can avoid testing all of 
            // them. We can also skip testing the far plane since we're using an infinite
            // perspective matrix (the light is always within it's bounds).
            const bool outside_camera_bounds = 
                dot(light_pos_hmg, camera[0].frustum.planes[0]) < -light_radius ||
                dot(light_pos_hmg, camera[0].frustum.planes[1]) < -light_radius ||
                dot(light_pos_hmg, camera[0].frustum.planes[2]) < -light_radius ||
                dot(light_pos_hmg, camera[0].frustum.planes[3]) < -light_radius ||
                dot(light_pos_hmg, camera[0].frustum.planes[4]) < -light_radius;

            if (within_z_bounds && !outside_camera_bounds) {
                const uint idx = atomicAdd(shared_lights_count, 1);
                shared_light_pos_rng[idx] = vec4(position, light_radius);
                shared_light_idx[idx] = local_light_idx;
            }
        }

        barrier();

        // Cull lights
        for (uint i = 0; i < shared_lights_count; ++i) {
            if (out_idx >= MAX_LIGHTS_PER_CLUSTER) {
                break;
            }

            const vec4 light_pos_rng = shared_light_pos_rng[i];

            // If it's fully outside of one plane, it's not visible
            if (dot(light_pos_rng.xyz, froxel_planes[0].xyz) > light_pos_rng.w ||
                dot(light_pos_rng.xyz, froxel_planes[1].xyz) > light_pos_rng.w ||
                dot(light_pos_rng.xyz, froxel_planes[2].xyz) > light_pos_rng.w ||
                dot(light_pos_rng.xyz, froxel_planes[3].xyz) > light_pos_rng.w
            ) {
                continue;
            }

            if (min_pt.x > max_pt.x || min_pt.y > max_pt.y) {
                continue;
            }

            // Find closest point on AABB of frustum. This helps to mitigate a false positive when
            // large lights are close to the camera/at a corner of the frustum.
            const vec3 closest_pt = clamp(light_pos_rng.xyz, min_pt, max_pt);
            const vec3 closest_dir = closest_pt - light_pos_rng.xyz;
            if (dot(closest_dir, closest_dir) > light_pos_rng.w * light_pos_rng.w) {
                continue;
            }

            // Add light to cluster
            light_table.clusters
                [gl_WorkGroupID.z]
                [gl_LocalInvocationID.x]
                [gl_LocalInvocationID.y]
                [out_idx] = shared_light_idx[i];
            out_idx += 1;
        }

        lights_offset += batch_size;

        // Wait for all lights to be checked
        barrier();
    }

    // Set light count
    light_table.clusters
        [gl_WorkGroupID.z]
        [gl_LocalInvocationID.x]
        [gl_LocalInvocationID.y]
        [out_idx] = FINAL_LIGHT_SENTINEL;
}