#version 450 core
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_control_flow_attributes : enable

#define ARD_SET_REFLECTION_TILE_CLASSIFIER 0
#include "ard_bindings.glsl"
#include "utils.glsl"

layout(push_constant) uniform constants {
    ReflectionTileClassifierPushConstants consts;
};

#include "reflections/common.glsl"

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

// NOTE: Since kS values range from 0 to 1, it's valid to bit-cast 
// them as uint and do comparisons.
shared uint tile_max_ks;
shared uint history_oob;

void main() {
    if (gl_LocalInvocationIndex == 0) {
        tile_max_ks = floatBitsToUint(0.0);
    }
    barrier();

    // Read in the kS component for this pixel and atomic max it with the other texels
    const vec2 kS_uv = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5)) * consts.inv_target_dims;
    const vec2 vel = texture(vel_tex, kS_uv).xy;
    const vec3 kS = texture(thin_g_tex, kS_uv).rgb;
    const ivec2 history_offset = ivec2(vel * vec2(consts.target_dims));
    const ivec2 history_sample = ivec2(gl_GlobalInvocationID.xy) - history_offset;

    atomicMax(tile_max_ks, floatBitsToUint(max(kS.r, max(kS.g, kS.b))));
    atomicAdd(
        history_oob, 
        uint(any(lessThan(history_sample, ivec2(0))) 
        || any(greaterThanEqual(history_sample, consts.target_dims)))
    );
    barrier();

    if (gl_LocalInvocationIndex == 0) {
        const uint tile_idx = (gl_WorkGroupID.y * gl_NumWorkGroups.x) + gl_WorkGroupID.x;
        const float max_ks = clamp(uintBitsToFloat(tile_max_ks), 0.0, 1.0);
        tiles[tile_idx].written[0] = 0;
        tiles[tile_idx].written[1] = 0;
        tiles[tile_idx].ray_len_sum = 0;
        tiles[tile_idx].max_ks = max_ks;
        atomicAdd(global_ks_sum, uint(round(max_ks * 255.0)));
    }
}