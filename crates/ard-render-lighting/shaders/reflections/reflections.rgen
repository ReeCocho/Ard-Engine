#version 460
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_ray_tracing : enable

#define ARD_SET_REFLECTIONS_PASS 0
#define ARD_SET_CAMERA 1
#include "ard_bindings.glsl"
#include "utils.glsl"

layout(location = 0) rayPayloadEXT RtReflectionsPayload hit_value;

layout(push_constant) uniform constants {
    RtReflectionsPushConstants consts;
};

#include "reflections/common.glsl"

void main() {
    const ReflectionRay ray = global_rays[gl_LaunchIDEXT.x];
    const ivec2 texel_coord = ivec2(
        int(ray.texel >> 16),
        int(ray.texel & 0xFFFF)
    );

    const uvec2 tile_dims = get_tile_dims();
    const uint tile_id = ((uint(texel_coord.y) / TILE_SIZE) * tile_dims.x) 
        + (texel_coord.x / TILE_SIZE);

    vec3 ray_origin = vec3(
        uintBitsToFloat(ray.origin_ray.x),
        uintBitsToFloat(ray.origin_ray.y),
        uintBitsToFloat(ray.origin_ray.z)
    );

    const vec3 ray_dir = oct_decode(unpackUnorm2x16(ray.origin_ray.w));

    const vec3 sun_dir = -normalize(global_lighting.sun_direction.xyz);

    hit_value.rng_state = 0;
    hit_value.sun_dir = vec4(sun_dir, 0.0);

    traceRayEXT(
        tlas,
        gl_RayFlagsOpaqueEXT,
        0xff, 0, 0, 0,
        ray_origin.xyz,
        0.05,
        ray_dir,
        consts.max_distance,
        0
    );

    vec3 brdf = hit_value.brdf.rgb;
    if (hit_value.brdf.a < 0.001) {
        brdf = vec3(0.0);
    }
    const vec3 emissive = hit_value.emissive.rgb;

    const uint ray_len = uint(
        length(hit_value.location.xyz - ray_origin.xyz) 
        * float(RAY_LEN_SCALE_FACT)
    );
    atomicAdd(tiles[tile_id].ray_len_sum, ray_len);

    if (hit_value.hit == 1) {
        // Check for sun ray
        // TODO: Use shadow maps when the ray lands within the view frustum
        ray_origin = hit_value.location.xyz;
        traceRayEXT(
            tlas,
            gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT, 
            0xff, 0, 0, 0,
            ray_origin,
            0.05,
            sun_dir,
            1000.0,
            0
        );

        if (hit_value.hit == 0) {
            brdf *= global_lighting.sun_color_intensity.a
            * global_lighting.sun_color_intensity.rgb;
        }
    }

    const vec3 final_radiance = brdf + emissive;

    imageStore(dst_image, texel_coord, vec4(final_radiance, 0.0));
}