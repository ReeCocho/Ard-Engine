[tasks.ignore-members]
workspace = false

[config]
default_to_workspace = false

[tasks.build-gltf-oven]
command = "cargo"
args = [ "build", "--package", "gltf-oven" ]

[tasks.build-ibl-oven]
command = "cargo"
args = [ "build", "--package", "ibl-oven" ]

[tasks.build-editor]
command = "cargo"
args = [ "build", "--package", "editor" ]

[tasks.copy-executables]
script_runner = "@duckscript"
dependencies = [
    "build-gltf-oven",
    "build-ibl-oven",
    "build-editor"
]
script = '''
mkdir ./build/debug/tools/
mkdir ./build/debug/temp/
cp ./target/debug/gltf-oven.exe ./build/debug/tools/gltf-oven.exe
cp ./target/debug/ibl-oven.exe ./build/debug/tools/ibl-oven.exe
cp ./target/debug/editor.exe ./build/debug/ard-editor.exe
cp ./target/debug/editor.pdb ./build/debug/ard-editor.pdb
'''

[tasks.copy-assets]
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! fs_extra = "1"
//! ```
fn main() {
    let options = fs_extra::dir::CopyOptions {
        overwrite: true,
        skip_exist: false,
        ..Default::default()
    };

    fs_extra::dir::copy("./data/assets/editor/", "./build/debug/assets/", &options).unwrap();
    fs_extra::dir::copy("./data/assets/game/", "./build/debug/assets/", &options).unwrap();
    fs_extra::dir::copy("./data/assets/standard/", "./build/debug/assets/", &options).unwrap();
    fs_extra::dir::copy("./data/assets/baked/", "./build/debug/assets/", &options).unwrap();
    std::fs::copy("./data/assets/packages.ron", "./build/debug/assets/packages.ron").unwrap();
}
'''

[tasks.build]
clear = true
dependencies = [
    "build-gltf-oven",
    "build-ibl-oven",
    "build-editor",
    "copy-executables",
    "copy-assets"
]